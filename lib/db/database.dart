// lib/db/database.dart
import 'dart:io';
import 'dart:convert'; // For type converters
import 'dart:typed_data'; // For type converters

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:nt_helper/db/daos/metadata_dao.dart'; // Import the DAO
import 'package:nt_helper/db/daos/presets_dao.dart'; // Import the new DAO
import 'package:nt_helper/db/daos/file_system_dao.dart'; // Import the new DAO
import 'package:nt_helper/db/tables.dart';
import 'package:nt_helper/models/packed_mapping_data.dart'; // Import for converter
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';

part 'database.g.dart'; // Generated by build_runner

@DriftDatabase(tables: [
  // Core Metadata
  Algorithms,
  Specifications,
  Units,
  Parameters,
  ParameterEnums,
  ParameterPages,
  ParameterPageItems,
  // Preset Data
  Presets,
  PresetSlots,
  PresetParameterValues,
  PresetMappings,
  PresetRoutings,
  // SD Card Representation
  FileSystemEntries,
], daos: [
  MetadataDao,
  PresetsDao, // Add the new DAO here
  FileSystemDao // Add the new DAO here
] // Add the DAO here
    )
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1; // Increment if schema changes later

  // Access DAOs (Drift generates getters)
  // MetadataDao get metadataDao => MetadataDao(this); // This getter is generated
  // PresetsDao get presetsDao => PresetsDao(this); // This getter is generated
  // FileSystemDao get fileSystemDao => FileSystemDao(this); // This getter is generated
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'nt_helper_db.sqlite'));
    // Consider adding logStatements: true during development for debugging
    return NativeDatabase.createInBackground(file /*, logStatements: true*/);
  });
}
