// lib/db/database.dart
import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:flutter/foundation.dart' show debugPrint;
import 'package:nt_helper/db/daos/metadata_dao.dart';
import 'package:nt_helper/db/daos/presets_dao.dart';
import 'package:nt_helper/db/daos/sd_cards_dao.dart';
import 'package:nt_helper/db/daos/indexed_preset_files_dao.dart';
import 'package:nt_helper/db/daos/plugin_installations_dao.dart';
import 'package:nt_helper/db/tables.dart';
import 'package:nt_helper/models/packed_mapping_data.dart'; // Import for converter
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
part 'database.g.dart'; // Generated by build_runner

@DriftDatabase(tables: [
  // Core Metadata
  Algorithms,
  Specifications,
  Units,
  Parameters,
  ParameterEnums,
  ParameterPages,
  ParameterPageItems,
  // Preset Data
  Presets,
  PresetSlots,
  PresetParameterValues,
  PresetParameterStringValues,
  PresetMappings,
  PresetRoutings,
  // SD Card Indexing
  SdCards,
  IndexedPresetFiles,
  // General Cache
  MetadataCache,
  // Plugin Installation Tracking
  PluginInstallations,
], daos: [
  MetadataDao,
  PresetsDao,
  SdCardsDao,
  IndexedPresetFilesDao,
  PluginInstallationsDao
])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 5; // Incremented schema version

  // Access DAOs (Drift generates getters)
  // MetadataDao get metadataDao => MetadataDao(this); // This getter is generated
  // PresetsDao get presetsDao => PresetsDao(this); // This getter is generated
  // FileSystemDao get fileSystemDao => FileSystemDao(this); // This getter is generated

  // --- MIGRATION LOGIC ---
  @override
  MigrationStrategy get migration => MigrationStrategy(
        onCreate: (Migrator m) async {
          await m.createAll();
          // Add initial data if needed
          debugPrint("Database created from scratch (version 2).");
        },
        onUpgrade: (Migrator m, int from, int to) async {
          debugPrint(
              "Starting database migration from version $from to $to...");
          // Example: Migrating FROM version 1 TO version 2 (or higher)
          if (from == 1) {
            try {
              debugPrint(
                  "Attempting to add rawUnitIndex column to parameters table...");
              await m.addColumn(parameters, parameters.rawUnitIndex);
              debugPrint(
                  "Migration successful: Added rawUnitIndex column to parameters table.");
            } catch (e) {
              debugPrint("Migration error adding rawUnitIndex column: $e");
              // Consider re-throwing or handling the error appropriately
            }
          }

          // Migration for version 3: Add SdCards and IndexedPresetFiles tables
          if (from <= 2) {
            try {
              debugPrint("Creating SdCards table...");
              await m.createTable(sdCards);
              debugPrint("Creating IndexedPresetFiles table...");
              await m.createTable(indexedPresetFiles);
              debugPrint(
                  "Migration successful: Added SdCards and IndexedPresetFiles tables.");
            } catch (e) {
              debugPrint("Migration error adding SD card tables: $e");
            }
          }

          // Migration for version 4: Add PluginInstallations table
          if (from <= 3) {
            try {
              debugPrint("Creating PluginInstallations table...");
              await m.createTable(pluginInstallations);
              debugPrint(
                  "Migration successful: Added PluginInstallations table.");
            } catch (e) {
              debugPrint(
                  "Migration error adding PluginInstallations table: $e");
            }
          }

          // Migration for version 5: Add pluginFilePath column to algorithms table
          if (from <= 4) {
            try {
              debugPrint("Adding pluginFilePath column to algorithms table...");
              await m.addColumn(algorithms, algorithms.pluginFilePath);
              debugPrint(
                  "Migration successful: Added pluginFilePath column to algorithms table.");
            } catch (e) {
              debugPrint("Migration error adding pluginFilePath column: $e");
            }
          }
        },
      );

// Define DAO getters
// MetadataDao get metadataDao => attachedDatabase.accessor(MetadataDao(this));
// ... other DAO getters ...
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'nt_helper_db.sqlite'));
    // Consider adding logStatements: true during development for debugging
    return NativeDatabase.createInBackground(file /*, logStatements: true*/);
  });
}
