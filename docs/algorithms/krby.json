{
  "guid": "krby",
  "name": "Kirbinator",
  "description": "This algorithm continuously records audio into a buffer and plays slices of the buffer under the influence of various probabilities. The slices can be pitched up and down, played forwards and backwards, and panned in stereo.\nKey to the operation of the algorithm are two trigger inputs, the Mark input and the Trigger input. These can be the same signal, but more interesting results often arise when they’re not. Typically both signals would be regular clocks, but this is by no means a requirement.\nThe Mark input defines the slices in the audio buffer. Say you have a rhythmic pattern going into the audio input, and the Mark signal is a (synchronised) clock. If that clock is a quarter note clock, the audio slices will be a quarter note long; if the clock is faster, say an eighth note, then the slices will shorter.\nIf your audio pattern is playing eighth notes and the clock is an eighth note, then one slice will be one note.\nThe Trigger input tells the Kirbinator when to choose a new slice to play and to change its playback parameters. In our example before, if the Trigger were a quarter note clock, the playback would jump and potentially change pitch and direction on every beat.\nNote that playback continues with the new parameters until another Trigger is received; it doesn’t, say, play one slice and then stop.\nThe audio buffer is stereo, but the algorithm can be used as mono, stereo, or mono-in stereo-out, according to the routing parameters.\nBy default the operation of the Kirbinator is completely random. However, via the ‘Random seed’ parameter, the behaviour can be made repeatable. Every time the ‘Apply seed’ parameter is set to 1, the internal random number generator is set to the ‘random seed’, and so its sequence of random actions will be repeated.\nChoose a different seed, and a different set of actions will be repeated. You might typically use this with a clock mapped to apply the seed every so often (say, every bar) to achieve a pattern which recognisably repeats in time with your track.\nAdditionally, the ‘Mutate’ parameter allows you to smoothly blend from one set of probabilities to another, so you can set up a repeating pattern, gradually blend to a different one, and then return to the first.\nPage 157\n[Simon Kirby gave a nice explanation of this (with video) in the Discord server, here](https://discord.com/channels/1268195809502036049/1292493724462485647/1330595944374468682)\n75\n\nTransient detection\nIf you enable the ‘Detect’ parameter, the algorithm will detect transients in the incoming audio and automatically apply marks in the audio buffer, allowing you to use the algorithm without an explicit Mark input.\nNote that you can use both together; automatic marks from transient detection supplemented by marks applied via the Mark input.\n\nUnclocked operations\nWhile we expect the most common use of the Kirbinator to involve sending regular clocks to its Mark and Trigger inputs, it also makes an interesting effect with more ad hoc triggers.\nIn this case you may want to set the play probability to 100%, so that you get playback every time you trigger it. In this case, simply sending a trigger to the trigger input starts playback.\nIf you leave the mark input unassigned, and there are no existing marks, a mark will be made at the buffer position at which you triggered playback.\nThe ‘Stop’ input can be used to stop playback, which otherwise continues indefinitely (or until a trigger with a non-100% play probability stops it).\nThere is also a parameter that allows for playback while you hold down the play trigger, and for stopping when you release it – if you set ‘Trigger hold time’ to something other than ‘Off’, that sets the time that the trigger has to be held after which releasing it stops playback.\nThis works particularly nicely with footswitches – playback occurs while you step on the switch, and stops when you lift your foot.\nYou may also like to combine the above with the ‘Feedback’ parameter, which essentially turns the effect into a delay/echo (try it with reverse playback).\n\nGUI\nThe display shows a waveform representation of the audio buffer. The shorter, darker line represents the current recording position.\nThe longer line or lines show the current playback position (if any).\nThe small checkmarks along the top of the waveform indicate the ‘marks’ defined by the Mark input.\n75 https://discord.com/channels/1268195809502036049/1292493724462485647/1330595944374468682\nPage 158\n\nProbabilities parameters\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nPitch up |0|100|0|%|The probability that playback will be pitched up.\nPitch down |0|100|0|%|The probability that playback will be pitched down.\nFifths |0|100|0|%|The probability that, if playback is pitched up or\ndown, it will be by a perfect fifth; otherwise, it will\nbe by an octave.\nReverse |0|100|0|%|The probability that playback will be reversed.\nGlide |0|100|0|%|The probability that a glide will be applied to any\npitch change.\nStutter |0|100|0|%|The probability that playback of the new slice will be\nstuttered, that is, that the initial part of the playback\nwill be repeated.\nTriplet |0|100|0|%|If ‘Metrical’ stutter has been selected, the probability\nthat a stutter will be a triplet division, rather than a\ndivision by a power of 2.\nPlay |0|100|100|%|The probability that playback will actually happen;\notherwise, playback stops.\n\nJumps parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nGlide<br>control |0|1|0||Sets whether a single glide time is used, or\nindependent times for up and down glides.\nGlide |0|1000|100|ms|The time of the glide time to apply, if a glide is\nactivated by the probability.\nGlide up |0|1000|100|ms|The glide up time, if the control is independent.\nGlide<br>down |0|1000|100|ms|The glide down time, if the control is independent.\nThrough<br>zero |0|1|1||Whether glides are allowed when the playback\ndirection reverses. Such glides can produce a very\nstrong “tape stop” effect.\nMin stutter |1|16|2||If a stutter is activated, the minimum number of\nrestarts.\nMax<br>stutter |1|16|3||If a stutter is activated, the maximum number of\nrestarts.\n\nPage 159\n\nMin jump |0|16|0|Col5|The minimum number of slices away from the\ncurrent record position to jump.\n---|---|---|---|---|---|\nMax jump |0|16|0||The maximum number of slices away from the\ncurrent record position to jump.\nStutter |0|1|1||Sets whether stutter is ‘Free’ (unconstrained apart\nfrom by the minimum and maximum parameters),\nor ‘Metrical’ (restricted to powers of 2 and 3,\naccording to the Triplet probability).\n\nTweaks parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nPitch<br>offset |-24|24|0|ST|Applies a constant pitch change to playback, added\nto any probabilistic pitch change.\nGlide<br>offset |-1000|1000|0|ms|Applies a constant glide time, added to any\nprobabilistic glide.\nFade |0|1000|10|ms|Sets the fade in/out time for slice playback.\nRandom<br>seed |0|32767|0||If non-zero, a random seed to apply.\nApply seed |0|1|0||Applies the random seed when the parameter goes\nfrom 0 to 1.\nMutate |0|100|0|%|The degree of mutation from the given random<br>seed to the next.\nTrigger<br>hold time |0.0|5.0|0.0|s|Sets the time after which releasing the trigger input\nwill be treated as a stop trigger.\n\nBuffer parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nBuffer size |1.00|||s|The audio buffer size (the maximum is set by the\nalgorithm specifications).\nFeedback |-24.0|0.0|-24.0|dB|The amount by which existing buffer content is\nattenuated on each recording pass.\n\nTransients parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nDetect |0|1|0||Enables transient detection.\nSensitivity |0|200|100|%|The transient detection sensitivity.\n\nMix parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nDry gain |-40|6|-40|dB|The level of the input signal passed through to the\noutput.\nEffect gain |-40|6|0|dB|The output level of the Kirbinator effect.\nPan mean |-100|100|0|%|The average pan position of slice playback.\nPan<br>deviation |0|100|0|%|The amount of random deviation away from the\naverage pan position, calculated for each trigger.\n\nRouting parameters\n\n|Name|Min|Max|Default|Unit|Description|\n---|---|---|---|---|---|\nLeft/mono<br>input |1|28|1||The left or mono audio input.\nRight input |0|28|0||The right audio input.\nLeft/mono<br>output |1|28|13||The left or mono audio output.\nRight<br>output |0|28|0||The right audio output.\nOutput<br>mode |0|1|0||The standard Add/Replace mode selector as\ndescribed above.\nMark input |0|28|3||The bus to use as the Mark signal.\nTrigger<br>input |0|28|3||The bus to use as the Trigger signal.\nStop input |0|28|0||A trigger on this bus causes the currently playing\nslice to stop.\nPitch<br>offset<br>input |0|28|0||A 1V/octave pitch CV on this bus is added to the\n‘Pitch offset’ parameter.\n",
  "categories": [
    "granular",
    "sampling",
    "audio effects",
    "randomization",
    "triggers"
  ]
}