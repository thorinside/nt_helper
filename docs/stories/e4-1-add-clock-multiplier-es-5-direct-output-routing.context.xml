<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>1</storyId>
    <title>Add Clock Multiplier ES-5 Direct Output Routing</title>
    <status>drafted</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/e4-1-add-clock-multiplier-es-5-direct-output-routing.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user configuring Clock Multiplier with ES-5 expander</asA>
    <iWant>nt_helper to display ES-5 direct output routing in the routing editor</iWant>
    <soThat>I can see where my multiplied clock signals are being sent</soThat>
    <tasks>
      - Create Clock Multiplier routing implementation extending Es5DirectOutputAlgorithmRouting base class
      - Implement canHandle() method checking for guid == 'clkm'
      - Implement createFromSlot() factory method calling createConfigFromSlot() with 1 channel
      - Define ioParameters mapping: 'Clock input' (input), 'Clock output' (normal output)
      - Register in algorithm_routing.dart factory after Euclidean check (around line 320)
      - Verify routing editor displays ES-5 direct output when ES-5 Expander > 0
      - Verify routing editor displays normal output bus when ES-5 Expander = 0
      - Run full test suite and ensure all existing tests pass
      - Run flutter analyze and ensure zero warnings
    </tasks>
  </story>

  <acceptanceCriteria>
    1. Create lib/core/routing/clock_multiplier_algorithm_routing.dart extending Es5DirectOutputAlgorithmRouting
    2. Implement canHandle() checking for guid == 'clkm'
    3. Implement createFromSlot() factory calling createConfigFromSlot() with 1 channel
    4. Define ioParameters: 'Clock input' (input), 'Clock output' (normal output)
    5. Check for ES-5 parameters in metadata (may be named differently than Clock algorithm)
    6. Register in algorithm_routing.dart factory after Euclidean check
    7. Routing editor displays ES-5 direct output when ES-5 Expander > 0
    8. Routing editor displays normal output bus when ES-5 Expander = 0
    9. All existing tests pass
    10. flutter analyze passes with zero warnings
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Algorithm 1: Clock Multiplier (clkm) - SIMPLEST</section>
        <snippet>Clock Multiplier is the simplest of the three algorithms. Single-channel clock multiplier following the exact same pattern as existing Clock (clck) algorithm implementation. Expected ES-5 parameters: ES-5 Expander (likely parameter 7), ES-5 Output (likely parameter 8).</snippet>
      </doc>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Base Class Pattern</section>
        <snippet>Es5DirectOutputAlgorithmRouting base class (206 lines) already handles dual-mode output logic. ES-5 mode (ES-5 Expander > 0): Output routes directly to ES-5 port, completely ignoring the normal Output parameter. Normal mode (ES-5 Expander = 0): Output uses normal bus assignment from Output parameter.</snippet>
      </doc>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Reference Implementation - Clock Algorithm</section>
        <snippet>ClockAlgorithmRouting (50 lines) is the reference implementation. Simple extension of base class with minimal algorithm-specific code. Pattern to copy exactly for Clock Multiplier.</snippet>
      </doc>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Factory Registration Pattern</section>
        <snippet>Registration occurs in algorithm_routing.dart lines 309-320. After Euclidean check, add Clock Multiplier check. Registration order: USB From, ES5 Encoder, Clock, Euclidean, [NEW] Clock Multiplier.</snippet>
      </doc>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Story E4.1 Implementation Guidance</section>
        <snippet>Estimated effort: 2 hours. Copy clock_algorithm_routing.dart to clock_multiplier_algorithm_routing.dart. Change guid check to 'clkm'. Define ioParameters (Clock input, Clock output). Register in factory after Euclidean. Success criteria: Routing editor shows ES-5 output when ES-5 Expander > 0, normal output when ES-5 Expander = 0.</snippet>
      </doc>
      <doc>
        <path>docs/architecture.md</path>
        <title>nt_helper Brownfield Architecture</title>
        <section>Routing System (Object-Oriented Framework)</section>
        <snippet>Routing uses OO framework for data-driven visualization. AlgorithmRouting.fromSlot() factory creates routing instances from live Slot data. ConnectionDiscoveryService discovers connections via bus assignments. Port model uses typesafe direct properties (no generic metadata maps).</snippet>
      </doc>
      <doc>
        <path>CLAUDE.md</path>
        <title>nt_helper - Disting NT MIDI Helper</title>
        <section>Routing System</section>
        <snippet>Routing editor uses object-oriented framework. DistingCubit exposes synchronized Slots. AlgorithmRouting.fromSlot() factory creates routing instances. ConnectionDiscoveryService discovers connections via bus assignments (1-12 inputs, 13-20 outputs). All routing logic lives in lib/core/routing/ framework.</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>lib/core/routing/es5_direct_output_algorithm_routing.dart</path>
        <kind>base class</kind>
        <symbol>Es5DirectOutputAlgorithmRouting</symbol>
        <lines>1-206</lines>
        <reason>Base class that Clock Multiplier routing will extend. Provides dual-mode output logic (ES-5 vs normal), generateOutputPorts() method, and createConfigFromSlot() helper.</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/clock_algorithm_routing.dart</path>
        <kind>reference implementation</kind>
        <symbol>ClockAlgorithmRouting</symbol>
        <lines>1-50</lines>
        <reason>Reference implementation to copy exactly for Clock Multiplier. Shows minimal extension pattern: canHandle() with guid check, createFromSlot() factory calling base helper.</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/euclidean_algorithm_routing.dart</path>
        <kind>reference implementation</kind>
        <symbol>EuclideanAlgorithmRouting</symbol>
        <lines>1-50</lines>
        <reason>Similar ES-5 implementation pattern showing per-channel ES-5 support. Useful for understanding the registration pattern.</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/algorithm_routing.dart</path>
        <kind>factory</kind>
        <symbol>AlgorithmRouting.fromSlot</symbol>
        <lines>309-326</lines>
        <reason>Factory method where Clock Multiplier routing must be registered. Add check after Euclidean (line 318-326), before Poly check (line 327).</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/connection_discovery_service.dart</path>
        <kind>service</kind>
        <symbol>ConnectionDiscoveryService</symbol>
        <lines>1-150</lines>
        <reason>Service that discovers connections based on bus assignments. Handles es5_direct bus marker for ES-5 connections (line 358). No changes required - already handles ES-5 markers.</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/bus_spec.dart</path>
        <kind>constants</kind>
        <symbol>BusSpec</symbol>
        <lines>1-44</lines>
        <reason>Bus range definitions. ES-5 buses are 29-30 (physical output buses). Helps understand bus numbering system.</reason>
      </artifact>
      <artifact>
        <path>test/core/routing/clock_euclidean_es5_test.dart</path>
        <kind>test</kind>
        <symbol>Clock/Euclidean ES-5 Direct Routing Tests</symbol>
        <lines>1-100</lines>
        <reason>Test pattern to follow for Clock Multiplier tests. Shows createClockSlot() helper, ES-5 mode tests, normal mode tests, connection discovery tests. Copy structure for new Clock Multiplier tests.</reason>
      </artifact>
      <artifact>
        <path>lib/core/routing/models/port.dart</path>
        <kind>model</kind>
        <symbol>Port</symbol>
        <lines>1-150</lines>
        <reason>Port model with busParam field for ES-5 direct marker. Understanding port structure helps with debugging routing issues.</reason>
      </artifact>
      <artifact>
        <path>lib/cubit/disting_cubit.dart</path>
        <kind>state management</kind>
        <symbol>DistingCubit</symbol>
        <lines>1-50</lines>
        <reason>Primary application state. Exposes synchronized Slots that contain algorithm and parameter data. Source of truth for routing system.</reason>
      </artifact>
    </code>

    <dependencies>
      <flutter>
        <dependency>flutter_bloc</dependency>
        <dependency>equatable</dependency>
        <dependency>uuid</dependency>
        <dependency>collection</dependency>
      </flutter>
      <dart>
        <dependency>flutter_test</dependency>
        <dependency>mocktail</dependency>
        <dependency>bloc_test</dependency>
      </dart>
    </dependencies>
  </artifacts>

  <constraints>
    - MUST extend Es5DirectOutputAlgorithmRouting base class (do not create new pattern)
    - MUST follow the exact pattern from ClockAlgorithmRouting reference implementation
    - MUST implement canHandle() static method checking slot.algorithm.guid == 'clkm'
    - MUST implement createFromSlot() static factory method
    - MUST define ioParameters map with 'Clock input' and 'Clock output' keys
    - MUST call Es5DirectOutputAlgorithmRouting.createConfigFromSlot() with channelCount = 1
    - MUST register in algorithm_routing.dart factory after Euclidean check (around line 320)
    - MUST NOT modify base class (es5_direct_output_algorithm_routing.dart)
    - MUST NOT modify connection discovery service (already handles ES-5 markers)
    - MUST NOT modify routing editor widget (purely display-driven, no logic changes)
    - Zero tolerance for flutter analyze errors or warnings
    - All existing tests must pass without modification
    - Use debugPrint() for debug messages, never print()
    - ES-5 parameters may not be in metadata yet (Story E4.4 will add them)
  </constraints>

  <interfaces>
    <interface>
      <name>Es5DirectOutputAlgorithmRouting.createConfigFromSlot</name>
      <kind>static factory helper</kind>
      <signature>
        static ({int channelCount, List inputPorts, MultiChannelAlgorithmConfig config})
        createConfigFromSlot(
          Slot slot, {
          required Map&lt;String, int&gt; ioParameters,
          Map&lt;String, int&gt;? modeParameters,
          Map&lt;String, ({int parameterNumber, int value})&gt;? modeParametersWithNumbers,
          String? algorithmUuid,
          required String debugName,
        })
      </signature>
      <path>lib/core/routing/es5_direct_output_algorithm_routing.dart:146-204</path>
    </interface>
    <interface>
      <name>AlgorithmRouting.fromSlot factory pattern</name>
      <kind>factory registration</kind>
      <signature>
        if (ClockMultiplierAlgorithmRouting.canHandle(slot)) {
          instance = ClockMultiplierAlgorithmRouting.createFromSlot(
            slot,
            ioParameters: ioParameters,
            modeParameters: modeParameters,
            modeParametersWithNumbers: modeParametersWithNumbers,
            algorithmUuid: algorithmUuid,
          );
        }
      </signature>
      <path>lib/core/routing/algorithm_routing.dart:320-327</path>
    </interface>
    <interface>
      <name>Port with ES-5 direct marker</name>
      <kind>model</kind>
      <signature>
        Port(
          id: '${algorithmUuid}_channel_${channel}_es5_output',
          name: 'Ch$channel → ES-5 $es5OutputValue',
          type: PortType.gate,
          direction: PortDirection.output,
          busParam: 'es5_direct', // Special marker for ES-5 connections
          channelNumber: es5OutputValue, // ES-5 port number (1-8)
        )
      </signature>
      <path>lib/core/routing/es5_direct_output_algorithm_routing.dart:53-63</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Follow existing test pattern from test/core/routing/clock_euclidean_es5_test.dart. Create helper function createClockMultiplierSlot() with channel configs. Test ES-5 mode (ES-5 Expander > 0) creates ES-5 direct output with correct port name and busParam marker. Test normal mode (ES-5 Expander = 0) creates normal output with busValue. Test connection discovery finds ES-5 connections. Use flutter_test framework with expect() assertions. Run flutter test before committing. All existing tests must pass without modification.
    </standards>
    <locations>
      test/core/routing/ - Routing implementation tests
      test/core/routing/clock_euclidean_es5_test.dart - Reference test pattern
      test/services/ - Service layer tests
    </locations>
    <ideas>
      <idea ac="1,2,3">
        Test ClockMultiplierAlgorithmRouting.canHandle() returns true for guid 'clkm' and false for other guids
      </idea>
      <idea ac="3,4,7">
        Test ES-5 mode: ES-5 Expander = 1, ES-5 Output = 3 creates ES-5 direct output port with name 'Ch1 → ES-5 3', busParam 'es5_direct', channelNumber 3
      </idea>
      <idea ac="3,4,8">
        Test normal mode: ES-5 Expander = 0, Output = 15 creates normal output port with name 'Channel 1', busValue 15
      </idea>
      <idea ac="7">
        Test ES-5 mode completely ignores Output parameter value
      </idea>
      <idea ac="6">
        Test factory registration: AlgorithmRouting.fromSlot() creates ClockMultiplierAlgorithmRouting instance for 'clkm' guid
      </idea>
      <idea ac="9">
        Run full test suite with flutter test and verify all existing tests still pass
      </idea>
      <idea ac="10">
        Run flutter analyze and verify zero warnings/errors
      </idea>
    </ideas>
  </tests>
</story-context>
