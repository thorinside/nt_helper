<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>4</epicId>
    <storyId>4</storyId>
    <title>Update Algorithm Metadata for ES-5 Parameters</title>
    <status>drafted</status>
    <generatedAt>2025-10-28</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/e4-4-update-algorithm-metadata-for-es-5-parameters.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a developer maintaining metadata accuracy</asA>
    <iWant>the three new algorithms' metadata to include ES-5 parameter definitions</iWant>
    <soThat>the routing system can discover ES-5 configuration from slot data</soThat>
    <tasks>
- [ ] Research firmware 1.12 ES-5 parameters (AC: 4-5)
  - [ ] Read Disting NT firmware 1.12 release notes
  - [ ] Identify exact ES-5 parameter names for clkm, clkd, pycv
  - [ ] Identify parameter numbers for ES-5 Expander and ES-5 Output
  - [ ] Verify parameter value ranges (min, max, default)
  - [ ] Document findings for reference

- [ ] Update Clock Multiplier metadata (AC: 1)
  - [ ] Open docs/algorithms/clkm.json
  - [ ] Review existing parameters
  - [ ] Add ES-5 Expander parameter definition (Name, min=0, max=6, default=0, type=enum, parameterNumber)
  - [ ] Add ES-5 Output parameter definition (Name, min=1, max=8, default=1, type=enum, parameterNumber)
  - [ ] Validate JSON syntax

- [ ] Update Clock Divider metadata (AC: 2)
  - [ ] Open docs/algorithms/clkd.json
  - [ ] Review existing parameters
  - [ ] Add per-channel ES-5 Expander parameter definition (Name pattern: "X:ES-5 Expander", is_per_channel: true, min=0, max=6, default=0, type=enum)
  - [ ] Add per-channel ES-5 Output parameter definition (Name pattern: "X:ES-5 Output", is_per_channel: true, min=1, max=8, default=1, type=enum)
  - [ ] Validate JSON syntax

- [ ] Update Poly CV metadata (AC: 3)
  - [ ] Open docs/algorithms/pycv.json
  - [ ] Review existing parameters
  - [ ] Add ES-5 Expander parameter definition (Parameter 53, min=0, max=6, default=0, type=enum)
  - [ ] Add ES-5 Output parameter definition (Parameter 54, min=1, max=8, default=1, type=enum)
  - [ ] Validate JSON syntax

- [ ] Regenerate full metadata (AC: 6)
  - [ ] Determine if assets/metadata/full_metadata.json needs regeneration
  - [ ] Check if metadata sync script exists
  - [ ] Run metadata sync/rebuild if needed
  - [ ] Verify full_metadata.json includes new ES-5 parameters

- [ ] Update and run metadata tests (AC: 7)
  - [ ] Open test/services/es5_parameters_metadata_test.dart
  - [ ] Add test: "Clock Multiplier has ES-5 parameters"
  - [ ] Add test: "Clock Divider has ES-5 parameters"
  - [ ] Add test: "Poly CV has ES-5 parameters"
  - [ ] Run metadata test: flutter test test/services/es5_parameters_metadata_test.dart
  - [ ] Fix any failures

- [ ] Run analysis (AC: 8)
  - [ ] Run flutter analyze
  - [ ] Fix any warnings if present
    </tasks>
  </story>

  <acceptanceCriteria>
1. Review docs/algorithms/clkm.json for ES-5 parameters
2. Review docs/algorithms/clkd.json for ES-5 parameters
3. Review docs/algorithms/pycv.json for ES-5 parameters
4. Add missing ES-5 parameter definitions if needed (check firmware 1.12 release notes)
5. Verify parameter names match what Disting NT hardware actually sends
6. Update assets/metadata/full_metadata.json if changes needed
7. Metadata test passes: test/services/es5_parameters_metadata_test.dart
8. flutter analyze passes with zero warnings
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: ES-5 Direct Output Support - Technical Context</title>
        <section>Metadata Update Requirements (Story E4.4)</section>
        <snippet>Defines exact ES-5 parameter structures for all three algorithms: Clock Multiplier (global ES-5, parameters 7-8), Clock Divider (per-channel ES-5, is_per_channel: true), Poly CV (global ES-5, parameters 53-54). Includes JSON examples and parameter value meanings: ES-5 Expander (0=Off, 1-6=Active), ES-5 Output (1-8=ES-5 port number).</snippet>
      </doc>
      <doc>
        <path>docs/epic-4-context.md</path>
        <title>Epic 4: Algorithm-Specific Technical Details</title>
        <section>Clock Multiplier / Clock Divider / Poly CV sections</section>
        <snippet>Details channel structure, parameter patterns, and metadata status for each algorithm. Notes that ES-5 parameters are NOT present in current metadata files and must be added. Poly CV ES-5 applies to gate outputs only, not pitch/velocity CVs.</snippet>
      </doc>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic Breakdown - Story E4.4</title>
        <section>Story E4.4: Update Algorithm Metadata for ES-5 Parameters</section>
        <snippet>Full story definition with acceptance criteria focusing on metadata accuracy. Independent story that can run in parallel with E4.1-E4.3. Critical for routing implementations to discover ES-5 parameters from slot data.</snippet>
      </doc>
      <doc>
        <path>docs/algorithms/clkm.json</path>
        <title>Clock Multiplier Algorithm Metadata</title>
        <section>Parameters array</section>
        <snippet>Currently has 6 parameters (0-5): Clock input, Clock output, Output mode, Multiplier, Low voltage, High voltage. Missing ES-5 parameters that need to be added.</snippet>
      </doc>
      <doc>
        <path>docs/algorithms/clkd.json</path>
        <title>Clock Divider Algorithm Metadata</title>
        <section>Parameters array</section>
        <snippet>Has global Reset input parameter and per-channel parameters (Type, Divisor, Enable, Input, Reset input, Output) with is_per_channel flag. Missing per-channel ES-5 parameters that need to be added.</snippet>
      </doc>
      <doc>
        <path>docs/algorithms/pycv.json</path>
        <title>Poly CV Algorithm Metadata</title>
        <section>Parameters and specifications</section>
        <snippet>Has 9 common parameters for MIDI/CV configuration. Specifications control voice count (1-14), first output bus, and output types (Gate/Pitch/Velocity). Missing global ES-5 parameters (53-54) that need to be added.</snippet>
      </doc>
      <doc>
        <path>docs/algorithms/clck.json</path>
        <title>Clock Algorithm Metadata (Reference)</title>
        <section>Reference implementation</section>
        <snippet>Reference algorithm that already has ES-5 support. Shows parameter structure pattern that should be followed for new algorithms. Has specifications for channel count (1-8 outputs).</snippet>
      </doc>
      <doc>
        <path>CLAUDE.md</path>
        <title>Project Instructions</title>
        <section>Commands and Development Standards</section>
        <snippet>flutter analyze must pass with zero warnings. Always use debugPrint(), never print(). Run tests before commits. Check for existing test patterns.</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>lib/services/algorithm_metadata_service.dart</path>
        <kind>service</kind>
        <symbol>AlgorithmMetadataService</symbol>
        <lines>1-262</lines>
        <reason>Core service that loads algorithm metadata from JSON files (docs/algorithms/) at startup. Implements singleton pattern. Methods: getAlgorithmByGuid(), getExpandedParameters(). Metadata flows from individual JSON files to this service for runtime access.</reason>
      </file>
      <file>
        <path>lib/services/metadata_import_service.dart</path>
        <kind>service</kind>
        <symbol>MetadataImportService</symbol>
        <lines>1-312</lines>
        <reason>Imports bundled full_metadata.json into database for offline mode. Validates export format and imports tables in correct order respecting foreign key constraints. Used on first launch if database is empty.</reason>
      </file>
      <file>
        <path>lib/services/algorithm_json_exporter.dart</path>
        <kind>service</kind>
        <symbol>AlgorithmJsonExporter.exportFullMetadata</symbol>
        <lines>119-272</lines>
        <reason>DEBUG ONLY method that exports all metadata tables from database to JSON file. Creates the full_metadata.json bundle. Exports: algorithms, specifications, parameters, parameterEnums, units, parameterPages. This is the tool to regenerate assets/metadata/full_metadata.json after updating algorithm JSON files.</reason>
      </file>
      <file>
        <path>test/services/es5_parameters_metadata_test.dart</path>
        <kind>test</kind>
        <symbol>ES-5 Parameters Metadata test group</symbol>
        <lines>1-222</lines>
        <reason>Tests ES-5 parameter presence in full_metadata.json for Clock (clck) and Euclidean (eucp) algorithms. Pattern to follow: verify parameter exists by algorithmGuid and parameterNumber, check name/min/max/default/rawUnitIndex values. Need to add similar tests for clkm, clkd, pycv.</reason>
      </file>
      <file>
        <path>lib/core/routing/es5_direct_output_algorithm_routing.dart</path>
        <kind>routing_base_class</kind>
        <symbol>Es5DirectOutputAlgorithmRouting</symbol>
        <lines>full file</lines>
        <reason>Base class for ES-5 direct output routing. Uses getChannelParameter() to read ES-5 Expander and ES-5 Output parameters from slot data. Routing implementations depend on these parameters being present in metadata and slot data to function correctly.</reason>
      </file>
      <file>
        <path>lib/core/routing/clock_algorithm_routing.dart</path>
        <kind>routing_implementation</kind>
        <symbol>ClockAlgorithmRouting</symbol>
        <lines>full file</lines>
        <reason>Reference ES-5 routing implementation for Clock algorithm. Shows pattern of extending Es5DirectOutputAlgorithmRouting and reading ES-5 parameters. Will be copied for Clock Multiplier implementation in Story E4.1.</reason>
      </file>
      <file>
        <path>lib/core/routing/euclidean_algorithm_routing.dart</path>
        <kind>routing_implementation</kind>
        <symbol>EuclideanAlgorithmRouting</symbol>
        <lines>full file</lines>
        <reason>Reference ES-5 routing implementation for Euclidean algorithm with per-channel ES-5. Shows pattern for Clock Divider implementation in Story E4.2. Demonstrates channel-prefixed parameter reading.</reason>
      </file>
      <file>
        <path>lib/core/routing/poly_algorithm_routing.dart</path>
        <kind>routing_implementation</kind>
        <symbol>PolyAlgorithmRouting</symbol>
        <lines>full file</lines>
        <reason>Existing routing for Poly CV algorithm. Will be extended in Story E4.3 to support ES-5 for gate outputs only. Needs ES-5 parameters 53-54 in metadata to enable this functionality.</reason>
      </file>
      <file>
        <path>pubspec.yaml</path>
        <kind>config</kind>
        <symbol>assets section</symbol>
        <lines>156-160</lines>
        <reason>Defines bundled assets including docs/algorithms/ and assets/metadata/ directories. Algorithm JSON files are loaded from docs/algorithms/ at runtime. Full metadata bundle is at assets/metadata/full_metadata.json.</reason>
      </file>
    </code>
    <dependencies>
      <flutter>
        <package name="flutter" version="sdk"/>
        <package name="drift" version="^2.28.1" purpose="ORM for database operations"/>
        <package name="path" version="^1.9.1" purpose="Path manipulation"/>
      </flutter>
    </dependencies>
  </artifacts>

  <constraints>
- All algorithm metadata files are in docs/algorithms/ directory as individual JSON files
- Each JSON has structure: guid, name, description, categories, parameters[], specifications[]
- Parameters must have: name, min, max, default, type, parameterNumber (or is_per_channel flag)
- ES-5 parameters use type "enum" with rawUnitIndex=14 (enum system)
- Parameter names must exactly match what hardware sends (case-sensitive)
- Clock Multiplier: global ES-5 parameters (not per-channel)
- Clock Divider: per-channel ES-5 parameters with "X:" prefix and is_per_channel: true
- Poly CV: global ES-5 parameters at positions 53-54
- full_metadata.json is a bundled export of all metadata tables from database
- Metadata regeneration may require running app in debug mode and using export dialog
- Tests read from assets/metadata/full_metadata.json, not individual algorithm JSON files
- Must maintain JSON syntax validity (no trailing commas, proper escaping)
- flutter analyze must pass with zero warnings
- All metadata changes require test updates to verify correctness
  </constraints>

  <interfaces>
    <interface>
      <name>AlgorithmMetadata JSON Structure</name>
      <kind>JSON schema</kind>
      <signature>{
  "guid": "string (4 chars)",
  "name": "string",
  "description": "string",
  "categories": ["string"],
  "specifications": [{"name": "string", "min": number, "max": number}],
  "parameters": [{
    "name": "string",
    "min": number,
    "max": number,
    "default": number,
    "type": "enum|bus|scaled|folder|string",
    "parameterNumber": number (optional if is_per_channel),
    "is_per_channel": boolean (optional),
    "is_common": boolean (optional)
  }]
}</signature>
      <path>docs/algorithms/*.json</path>
    </interface>
    <interface>
      <name>ES-5 Parameter Pattern (Global)</name>
      <kind>JSON parameter definition</kind>
      <signature>{
  "name": "ES-5 Expander",
  "min": 0,
  "max": 6,
  "default": 0,
  "type": "enum",
  "parameterNumber": N
},
{
  "name": "ES-5 Output",
  "min": 1,
  "max": 8,
  "default": 1,
  "type": "enum",
  "parameterNumber": N+1
}</signature>
      <path>Pattern for clkm and pycv</path>
    </interface>
    <interface>
      <name>ES-5 Parameter Pattern (Per-Channel)</name>
      <kind>JSON parameter definition</kind>
      <signature>{
  "name": "ES-5 Expander",
  "min": 0,
  "max": 6,
  "default": 0,
  "type": "enum",
  "is_per_channel": true
},
{
  "name": "ES-5 Output",
  "min": 1,
  "max": 8,
  "default": 1,
  "type": "enum",
  "is_per_channel": true
}</signature>
      <path>Pattern for clkd (will become X:ES-5 Expander, X:ES-5 Output at runtime)</path>
    </interface>
    <interface>
      <name>AlgorithmMetadataService.getAlgorithmByGuid</name>
      <kind>Service method</kind>
      <signature>AlgorithmMetadata? getAlgorithmByGuid(String guid)</signature>
      <path>lib/services/algorithm_metadata_service.dart</path>
    </interface>
    <interface>
      <name>AlgorithmJsonExporter.exportFullMetadata</name>
      <kind>DEBUG export method</kind>
      <signature>Future&lt;void&gt; exportFullMetadata(String filePath) async</signature>
      <path>lib/services/algorithm_json_exporter.dart</path>
    </interface>
  </interfaces>

  <tests>
    <standards>Flutter test framework with flutter_test package. Tests organized by domain (services/, core/routing/, integration/). Use descriptive test names with clear assertions. Pattern: group() for test suites, test() for individual cases, expect() for assertions. Test files mirror source structure (test/services/ maps to lib/services/). Run tests with flutter test [path]. All tests must pass before commit.</standards>
    <locations>
- test/services/es5_parameters_metadata_test.dart - ES-5 metadata verification tests
- test/core/routing/ - Routing implementation tests (will use metadata)
- test/integration/ - Integration tests (may include metadata loading)
    </locations>
    <ideas>
      <test ac="1,2,3,4">
        <name>Clock Multiplier has ES-5 parameters</name>
        <approach>Load full_metadata.json and verify clkm has ES-5 Expander and ES-5 Output parameters with correct min/max/default values. Check parameterNumber is present. Verify rawUnitIndex=14 for enum type.</approach>
      </test>
      <test ac="1,2,3,4">
        <name>Clock Divider has ES-5 parameters</name>
        <approach>Load full_metadata.json and verify clkd has per-channel ES-5 parameters. Check parameter names have channel prefix pattern (1:ES-5 Expander, etc.). Verify correct value ranges and enum type.</approach>
      </test>
      <test ac="1,2,3,4">
        <name>Poly CV has ES-5 parameters</name>
        <approach>Load full_metadata.json and verify pycv has ES-5 Expander (parameter 53) and ES-5 Output (parameter 54) with correct values. Verify these are global parameters, not per-channel.</approach>
      </test>
      <test ac="5">
        <name>Parameter names match firmware specification</name>
        <approach>Document parameter names found in firmware 1.12 release notes and verify metadata uses exact same names. Create reference documentation for parameter numbers.</approach>
      </test>
      <test ac="6">
        <name>Full metadata includes new ES-5 parameters</name>
        <approach>After regenerating full_metadata.json, verify all three algorithms' ES-5 parameters are present in the bundled export. Check that parameters table includes correct entries with algorithmGuid matching clkm/clkd/pycv.</approach>
      </test>
      <test ac="7,8">
        <name>All metadata tests pass with zero analyzer warnings</name>
        <approach>Run flutter test test/services/es5_parameters_metadata_test.dart and flutter analyze. Fix any failures or warnings. Ensure test coverage is complete for all three algorithms.</approach>
      </test>
    </ideas>
  </tests>
</story-context>
