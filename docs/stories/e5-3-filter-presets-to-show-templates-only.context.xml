<story-context id="e5-3-filter-presets-to-show-templates-only" v="1.0">
  <metadata>
    <epicId>epic-5</epicId>
    <storyId>5.3</storyId>
    <title>Filter presets to show templates only</title>
    <status>ready-for-dev</status>
    <generatedAt>2025-10-30</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/e5-3-filter-presets-to-show-templates-only.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user browsing templates for injection</asA>
    <iWant>to see a filtered view showing only templates (not all saved presets)</iWant>
    <soThat>I can quickly find and select the template I want to inject</soThat>
    <tasks>
- Add Templates tab or filter toggle to Offline Data screen
- Implement getTemplatesOnly() query in PresetsDao
- Add empty state message when no templates exist
- Add template count badge or indicator
- Optimize view switching performance
- Test filter toggle behavior
    </tasks>
  </story>

  <acceptanceCriteria>
1. Add "Templates" tab or filter toggle to Offline Data screen preset tab
2. Templates view shows only presets where `isTemplate` is true
3. Templates are sorted alphabetically by name
4. Empty state message shown when no templates exist: "No templates found. Mark saved presets as templates to see them here."
5. Template count badge or indicator shows number of available templates
6. Switching between "All Presets" and "Templates" view is instant (no loading delay)
7. `flutter analyze` passes with zero warnings
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/epics.md</path>
        <title>Epic 5: Preset Template System</title>
        <section>Story E5.3</section>
        <snippet>Filtered view for templates only. Enables quick template discovery for injection workflow.</snippet>
      </doc>
      <doc>
        <path>CLAUDE.md</path>
        <title>Project Documentation - Database</title>
        <section>Database Architecture</section>
        <snippet>Drift ORM for local data persistence. Stream-based queries for reactive UI updates.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-5.md</path>
        <title>Technical Specification - Epic 5</title>
        <section>Template Browsing</section>
        <snippet>Tab-based navigation with badge count. Templates sorted alphabetically. Empty state guidance.</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>lib/db/daos/presets_dao.dart</path>
        <kind>dao</kind>
        <symbol>PresetsDao</symbol>
        <lines>50-150</lines>
        <reason>Add getTemplatesOnly() query method returning filtered stream of templates.</reason>
      </file>
      <file>
        <path>lib/ui/metadata_sync/metadata_sync_cubit.dart</path>
        <kind>cubit</kind>
        <symbol>MetadataSyncCubit</symbol>
        <lines>N/A</lines>
        <reason>Manage filter state and expose template query stream.</reason>
      </file>
      <file>
        <path>lib/ui/metadata_sync/metadata_sync_page.dart</path>
        <kind>widget</kind>
        <symbol>MetadataSyncPage</symbol>
        <lines>N/A</lines>
        <reason>UI implementation of Templates tab/filter with badge count.</reason>
      </file>
    </code>
    <dependencies>
      <dart>
        flutter: Widget framework with TabBar/TabController
        flutter_bloc: Reactive state management
        drift: Stream-based database queries
      </dart>
    </dependencies>
  </artifacts>

  <constraints>
- Maintain consistency with existing preset browser patterns
- Reuse existing list item widgets from E5.2
- Follow Material Design tab/filter patterns
- Ensure accessibility labels for screen readers
- Use Drift watch queries for reactive count updates
- No unnecessary rebuilds during filter toggle
- Performance: instant switching even with 100+ presets
  </constraints>

  <interfaces>
    <interface>
      <name>PresetsDao.getTemplatesOnly</name>
      <kind>method</kind>
      <signature>Future&lt;List&lt;FullPresetDetails&gt;&gt; getTemplatesOnly()</signature>
      <path>lib/db/daos/presets_dao.dart</path>
    </interface>
    <interface>
      <name>PresetsDao.watchTemplateCount</name>
      <kind>method</kind>
      <signature>Stream&lt;int&gt; watchTemplateCount()</signature>
      <path>lib/db/daos/presets_dao.dart</path>
    </interface>
    <interface>
      <name>MetadataSyncCubit.setTemplateFilter</name>
      <kind>method</kind>
      <signature>void setTemplateFilter(bool showTemplatesOnly)</signature>
      <path>lib/ui/metadata_sync/metadata_sync_cubit.dart</path>
    </interface>
  </interfaces>

  <tests>
    <standards>
Unit tests for DAO query methods. Widget tests for filter toggle behavior. Integration tests for reactive count updates. Manual testing with various template counts (0, 1, 10, 100+).
    </standards>
    <locations>
test/db/daos/presets_dao_test.dart
test/ui/metadata_sync/metadata_sync_page_test.dart
    </locations>
    <ideas>
- AC#2: Unit test getTemplatesOnly() returns only templates
- AC#3: Unit test templates sorted alphabetically by name
- AC#4: Widget test empty state message displayed when count=0
- AC#5: Widget test badge count updates reactively
- AC#6: Performance test switching with 100+ presets
    </ideas>
  </tests>
</story-context>
