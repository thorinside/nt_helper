name: Multi-Platform Build

on:
  push:
    tags:
      - "v*" # e.g., v1.0, v1.2.3, etc.

env:
  FLUTTER_VERSION: "3.35.7"

permissions:
  contents: write # Needed for creating/updating GitHub releases

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version (for the create-release job)
        id: extract_version
        run: |
          # e.g. "v1.2.3" => "1.2.3"
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get previous tag for comparison
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${{ github.ref_name }}" | head -1)
          echo "Previous tag: $PREVIOUS_TAG"
          
          # If no previous tag, use initial commit
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate release notes with categorization
          {
            echo "## 🚀 What's New in ${{ github.ref_name }}"
            echo ""
            
            # Features (feat:, add:, new:)
            FEATURES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --grep="feat:" --grep="add:" --grep="new:" --grep="feature:" -i)
            if [ ! -z "$FEATURES" ]; then
              echo "### ✨ Features"
              echo "$FEATURES"
              echo ""
            fi
            
            # Improvements (improve:, enhance:, update:)  
            IMPROVEMENTS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --grep="improve:" --grep="enhance:" --grep="update:" --grep="refactor:" -i)
            if [ ! -z "$IMPROVEMENTS" ]; then
              echo "### 🔧 Improvements"
              echo "$IMPROVEMENTS"
              echo ""
            fi
            
            # Bug fixes (fix:, bug:)
            FIXES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --grep="fix:" --grep="bug:" -i)
            if [ ! -z "$FIXES" ]; then
              echo "### 🐛 Bug Fixes"
              echo "$FIXES"
              echo ""
            fi
            
            # Documentation (docs:, doc:)
            DOCS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --grep="docs:" --grep="doc:" -i)
            if [ ! -z "$DOCS" ]; then
              echo "### 📚 Documentation"
              echo "$DOCS"
              echo ""
            fi
            
            # Other changes
            OTHER=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --invert-grep --grep="feat:" --grep="add:" --grep="new:" --grep="feature:" --grep="improve:" --grep="enhance:" --grep="update:" --grep="refactor:" --grep="fix:" --grep="bug:" --grep="docs:" --grep="doc:" -i)
            if [ ! -z "$OTHER" ]; then
              echo "### 🔄 Other Changes"
              echo "$OTHER"
              echo ""
            fi
            
            # Pull requests merged
            echo "### 📋 Pull Requests"
            git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ github.ref_name }} --grep="#[0-9]" | head -10
            
            echo ""
            echo "---"
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ github.ref_name }}"
            
          } > release_notes.md
          
          # Save for next step
          cat release_notes.md

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: "${{ github.ref_name }} - Automated Release"
          bodyFile: release_notes.md
          draft: false
          prerelease: false
          generateReleaseNotes: true

  android:
    name: Build and Sign Android APK
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Clone and Build UVCCamera Native Library
        run: |
          cd /tmp
          git clone https://github.com/DigifinityLtd/UVCCamera.git
          cd UVCCamera
          git checkout feature/16kb-page-size-compliance
          ./gradlew :lib:assembleRelease
          ./gradlew :lib:publishToMavenLocal

      - name: Install dependencies
        run: flutter pub get

      - name: Decode and Save Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-key.jks

      - name: Build Android APK
        env:
          KEYSTORE_PATH: release-key.jks
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: flutter build apk --release

      - name: List build output (debug)
        run: ls -R build/app/outputs/flutter-apk

      - name: Rename Android APK
        run: mv ./build/app/outputs/flutter-apk/app-release.apk ./build/app/outputs/flutter-apk/nt_helper-${VERSION}.apk

      - name: Upload Android Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: "**/nt_helper-${{ env.VERSION }}.apk"

  android_aab_play_store:
    name: Build Android AAB and Upload to Play Store
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Clone and Build UVCCamera Native Library
        run: |
          cd /tmp
          git clone https://github.com/DigifinityLtd/UVCCamera.git
          cd UVCCamera
          git checkout feature/16kb-page-size-compliance
          ./gradlew :lib:assembleRelease
          ./gradlew :lib:publishToMavenLocal

      - name: Install dependencies
        run: flutter pub get

      - name: Decode and Save Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-key.jks

      - name: Build Android App Bundle
        env:
          KEYSTORE_PATH: release-key.jks # Relative to android/app
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: flutter build appbundle --release

      - name: List build output (debug)
        run: ls -R build/app/outputs/bundle/release

      - name: Rename Android AAB
        run: mv ./build/app/outputs/bundle/release/app-release.aab ./build/app/outputs/bundle/release/nt_helper-${VERSION}.aab

      - name: Save AAB as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: nt_helper-${{ env.VERSION }}.aab
          path: ./build/app/outputs/bundle/release/nt_helper-${{ env.VERSION }}.aab

      - name: Upload AAB to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: dev.nosuch.nt_helper
          releaseFiles: ./build/app/outputs/bundle/release/nt_helper-${{ env.VERSION }}.aab
          track: internal
          status: completed

  windows:
    name: Build Windows App
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version
        shell: pwsh
        run: |
          $version = '${{ github.ref_name }}'
          $version = $version.Substring(1)  # strip leading 'v'
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows

      - name: Zip Windows App
        shell: pwsh
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath "nt_helper-${env:VERSION}-windows.zip"

      - name: List build output (debug)
        run: ls -R build/windows/x64/runner/Release

      - name: Upload Windows Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: "**/nt_helper-${{ env.VERSION }}-windows.zip"

  linux:
    name: Build Linux App
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version
        id: extract_version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
          flutter pub get

      - name: Build Linux
        run: flutter build linux

      - name: Zip Linux App
        run: |
          cd build/linux/x64/release/bundle
          zip -r nt_helper-${VERSION}-linux.zip *

      - name: List build output (debug)
        run: ls -R build/linux/x64/release/bundle

      - name: Upload Linux Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: "**/nt_helper-${{ env.VERSION }}-linux.zip"
