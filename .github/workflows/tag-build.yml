name: Multi-Platform Build

on:
  push:
    tags:
      - 'v*' # Match tags starting with 'v', e.g. v1.0, v2.1.0

# Ensure the workflow can create and update releases
permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Version Name
        id: extract_version
        run: |
          # Read the raw tag (e.g. "v1.2.3") from github.ref_name
          version="${{ github.ref_name }}"
          # Strip leading "v" (if present)
          version="${version#v}"
          # Save to environment
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          releaseName: "Release ${{ github.ref_name }}"
          body: "Automated release for version ${{ github.ref_name }}"
          draft: false
          prerelease: false

  android:
    name: Build and Sign Android APK
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.27.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Decode and Save Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > release-key.jks

      - name: Build Android APK
        env:
          KEYSTORE_PATH: release-key.jks
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: flutter build apk --release

      - name: Rename Android APK
        run: mv build/app/outputs/flutter-apk/app-release.apk \
          build/app/outputs/flutter-apk/nt_helper-${{ env.VERSION }}.apk

      - name: Upload Android Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          createRelease: false       # Do not create a new release
          allowUpdates: true         # Allow updating existing release
          artifacts: |
            path: build/app/outputs/flutter-apk/nt_helper-${{ env.VERSION }}.apk
              name: nt_helper-${{ env.VERSION }}-android.apk

  macos:
    name: Build macOS App
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.27.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: flutter build macos

      - name: Zip macOS App
        run: cd build/macos/Build/Products/Release && zip -r nt_helper-${{ env.VERSION }}.zip nt_helper.app

      - name: Upload macOS Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          createRelease: false
          allowUpdates: true
          artifacts: |
            path: build/macos/Build/Products/Release/nt_helper-${{ env.VERSION }}.zip
              name: nt_helper-${{ env.VERSION }}-macos.zip

  windows:
    name: Build Windows App
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.27.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows

      - name: Zip Windows App
        run: cd build/windows/x64/runner/Release && zip -r nt_helper-${{ env.VERSION }}.zip *

      - name: Upload Windows Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          createRelease: false
          allowUpdates: true
          artifacts: |
            path: build/windows/x64/runner/Release/nt_helper-${{ env.VERSION }}.zip
              name: nt_helper-${{ env.VERSION }}-windows.zip

  linux:
    name: Build Linux App
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.27.2'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux

      - name: Zip Linux App
        run: cd build/linux/x64/release/bundle && zip -r nt_helper-${{ env.VERSION }}.zip *

      - name: Upload Linux Artifact to Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          createRelease: false
          allowUpdates: true
          artifacts: |
            path: build/linux/x64/release/bundle/nt_helper-${{ env.VERSION }}.zip
              name: nt_helper-${{ env.VERSION }}-linux.zip
