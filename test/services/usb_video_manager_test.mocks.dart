// Mocks generated by Mockito 5.4.6 from annotations
// in nt_helper/test/services/usb_video_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nt_helper/domain/video/usb_device_info.dart' as _i4;
import 'package:nt_helper/services/platform_channels/usb_video_channel.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UsbVideoChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsbVideoChannel extends _i1.Mock implements _i2.UsbVideoChannel {
  MockUsbVideoChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.UsbDeviceInfo>> listUsbCameras() =>
      (super.noSuchMethod(
            Invocation.method(#listUsbCameras, []),
            returnValue: _i3.Future<List<_i4.UsbDeviceInfo>>.value(
              <_i4.UsbDeviceInfo>[],
            ),
          )
          as _i3.Future<List<_i4.UsbDeviceInfo>>);

  @override
  _i3.Future<bool> requestUsbPermission(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#requestUsbPermission, [deviceId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Stream<dynamic> startVideoStream(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#startVideoStream, [deviceId]),
            returnValue: _i3.Stream<dynamic>.empty(),
          )
          as _i3.Stream<dynamic>);

  @override
  _i3.Future<void> stopVideoStream() =>
      (super.noSuchMethod(
            Invocation.method(#stopVideoStream, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> isSupported() =>
      (super.noSuchMethod(
            Invocation.method(#isSupported, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
